From 2a380a40a8ebe1c9468bf48ffbd76c5193976b10 Mon Sep 17 00:00:00 2001
From: Rafi Baum <rafi@ukbaums.com>
Date: Tue, 23 Apr 2019 16:32:42 -0400
Subject: [PATCH] Add world generation customization API


diff --git a/src/main/java/network/stratus/sportpaper/api/world/CustomizedGenerationSettings.java b/src/main/java/network/stratus/sportpaper/api/world/CustomizedGenerationSettings.java
new file mode 100644
index 0000000..3906d4e
--- /dev/null
+++ b/src/main/java/network/stratus/sportpaper/api/world/CustomizedGenerationSettings.java
@@ -0,0 +1,74 @@
+package network.stratus.sportpaper.api.world;
+
+import java.util.Random;
+
+/**
+ * This class is used to customize aspects of world generation outside of what vanilla Minecraft
+ * normally provides.
+ *
+ * @author Rafi Baum
+ */
+public class CustomizedGenerationSettings {
+
+  private int caveFrequency = 7;
+  private int caveLengthMin = 4;
+
+  /**
+   * Gets how frequently caves are generated, as the inverse of the percent chance that a cave
+   * (system) will start in any given chunk. For example, 7 would represent a 1/7 (14.8%) chance
+   * that a cave spawns in a chunk.
+   *
+   * @return the inverse of the chance a cave will spawn in a chunk
+   */
+  public int getCaveFrequency() {
+    return caveFrequency;
+  }
+
+  /**
+   * Sets how frequently caves are generated, as the inverse of the percent chance that a cave
+   * (system) will start in any given chunk. For example, 7 would represent a 1/7 (14.8%) chance
+   * that a cave spawns in a chunk.
+   *
+   * @return the inverse of the chance a cave will spawn in a chunk
+   */
+  public void setCaveFrequency(int caveFrequency) {
+    this.caveFrequency = caveFrequency;
+  }
+
+  /**
+   * Gets the minimum length factor of a cave, a positive integer greater than zero. The larger the
+   * factor, the longer caves will be on average.
+   *
+   * @return minimum cave length factor
+   */
+  public int getCaveLengthMin() {
+    return caveLengthMin;
+  }
+
+  /**
+   * Sets minimum cave length factor. The larger the factor, the longer caves will be on average.
+   * @param caveLengthMin minimum cave length factor
+   */
+  public void setCaveLengthMin(int caveLengthMin) {
+    this.caveLengthMin = caveLengthMin;
+  }
+
+  /**
+   * Override this method to change how large caves should be.
+   * @param random
+   * @return size of caves, typically between 0 and 3
+   */
+  public float getCaveSize(Random random) {
+    return random.nextFloat() * 2.0F + random.nextFloat();
+  }
+
+  /**
+   * Override this method to change how large caves should be when a larger cave should be spawned.
+   * @param random
+   * @return size of larger caves, typically between 1 and 4
+   */
+  public float getLargeCaveSize(Random random) {
+    return random.nextFloat() * random.nextFloat() * 3.0F + 1.0F;
+  }
+
+}
diff --git a/src/main/java/org/bukkit/WorldCreator.java b/src/main/java/org/bukkit/WorldCreator.java
index 81c95d1..0bb654a 100644
--- a/src/main/java/org/bukkit/WorldCreator.java
+++ b/src/main/java/org/bukkit/WorldCreator.java
@@ -1,6 +1,7 @@
 package org.bukkit;
 
 import java.util.Random;
+import network.stratus.sportpaper.api.world.CustomizedGenerationSettings;
 import org.bukkit.command.CommandSender;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.plugin.Plugin;
@@ -17,6 +18,7 @@ public class WorldCreator {
     private boolean generateStructures = true;
     private String generatorSettings = "";
     private boolean hardcore;
+    private CustomizedGenerationSettings customGenSettings = new CustomizedGenerationSettings();
 
     /**
      * Creates an empty WorldCreationOptions for the given world name
@@ -260,6 +262,21 @@ public class WorldCreator {
     }
 
     /**
+     * @return customized generation settings used in world generation.
+     */
+    public CustomizedGenerationSettings getCustomGenSettings() {
+        return customGenSettings;
+    }
+
+    /**
+     * Sets what settings should be used during world generation.
+     * @param settings
+     */
+    public void setCustomGenSettings(CustomizedGenerationSettings settings) {
+        customGenSettings = settings;
+    }
+
+    /**
      * Creates a world with the specified options.
      * <p>
      * If the world already exists, it will be loaded from disk and some
-- 
2.7.4

